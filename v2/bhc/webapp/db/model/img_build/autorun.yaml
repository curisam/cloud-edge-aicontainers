- name: Docker model Generation && Distribution
  hosts: all
  
  vars:
    image_name: "{{ ansible_facts['architecture'] }}-model"
    registry_ip: 123.214.186.252:39500
    tag: classification
    model_file: from_input
    ver: 1.0

  tasks:

  ## build new model image
  - name: cpu_arch detection
    tags: build
    ansible.builtin.debug:
      var: ansible_facts['architecture']

  - name: build test
    tags: build
    command: docker build --tag {{ image_name }}:{{ tag }}_{{ ver }} --build-arg model_file={{ model_file }} buildimg/
    register: command_output
  - debug: msg="{{ command_output.stdout_lines }}"
    tags: build
  



  ## run container & test model
  - name: run container
    tags: test
    command: docker run -d --name {{ tag }}_model -it {{ image_name }}:{{ tag }}_{{ ver }}
    register: command_output
  - debug: msg="{{ command_output.stdout_lines }}"
    tags: test

  - name: model prediction test
    tags: test
    command: docker exec {{ tag }}_model python home/model.py
    register: command_output
  - debug: msg="{{ command_output.stdout_lines }}"
    tags: test
  




  ## rename & push model image
  - name: rename model image...
    tags: push
    command: docker tag {{ image_name }}:{{ tag }}_{{ ver }} {{ registry_ip }}/{{ image_name }}:{{ tag }}_{{ ver }}
    register: command_output
  - debug: msg="{{ command_output.stdout_lines }}"
    tags: push

  - name: push image...
    tags: push
    command: docker push {{ registry_ip }}/{{ image_name }}:{{ tag }}_{{ ver }}
    register: command_output
  - debug: msg="{{ command_output.stdout_lines }}"
    tags: push

  - name: check result...
    tags: push
    command: 
      curl -k https://{{ registry_ip }}/v2/_catalog
      curl -k https://{{ registry_ip }}/v2/{{ image_name }}/tags/list
    register: command_output
  - debug: msg="{{ command_output.stdout_lines }}"
    tags: push




  - name: get model data
    tags: log
    command: docker images {{ image_name }}:{{ tag }}_{{ ver }} --format '{{"{{json . }}"}}'
    register: output
  - debug: msg="{{output.stdout}}"

  - name: data processing
    tags: log
    set_fact:
      json_data: "{{ output.stdout | from_json }}"

  - debug: msg="{{json_data}}"
    tags: log

  - name: get date
    tags: log
    set_fact:
      date: "{{ json_data | json_query(jmesquery) }}"
    vars:
      jmesquery: 'CreatedAt'

  - name: get size
    tags: log
    set_fact:
      size: "{{ json_data | json_query(jmesquery) }}"
    vars:
      jmesquery: 'Size'

  - name: get result
    tags: log
    debug:
      msg:
        - "date={{ date }}"
        - "size={{ size }}"